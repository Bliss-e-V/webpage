---

---

<div id="canvas" class="absolute top-0 left-0 w-screen h-screen md:fixed -z-10">
</div>

<script>
  import * as THREE from "three";
  // @ts-ignore
  import { Perlin } from "three-noise";

  let canvas: HTMLElement;
  let scene: THREE.Scene;
  let camera: THREE.PerspectiveCamera;
  let renderer: THREE.Renderer;
  let particles: Particles;

  let width: number;
  let height: number;
  let scrollType: string = "";

  let SIZE_FLOWFIELD: number = 70;
  let NUM_PARTICLES: number = 20000;
  let PARTICLE_SIZE: number = 0.1;
  let PARTICLE_COLOR: number = 0xffffff;

  ///////////////
  // perlin noise
  ///////////////
  class PerlinNoise {
    perlin: Perlin;

    constructor(seed: number) {
      this.perlin = new Perlin(Math.E);
    }

    perlinNoise(x: number, y: number, z: number) {
      let eps = 1.2;
      let n1, n2, a, b;
      let curl = new THREE.Vector3();

      n1 = this.perlin.get3(new THREE.Vector3(x, y + eps, z));
      n2 = this.perlin.get3(new THREE.Vector3(x, y - eps, z));

      a = (n1 - n2) / (2 * eps);

      n1 = this.perlin.get3(new THREE.Vector3(x, y, z + eps));
      n2 = this.perlin.get3(new THREE.Vector3(x, y, z - eps));

      b = (n1 - n2) / (2 * eps);

      curl.x = a - b;

      n1 = this.perlin.get3(new THREE.Vector3(x, y, z + eps));
      n2 = this.perlin.get3(new THREE.Vector3(x, y, z - eps));

      a = (n1 - n2) / (2 * eps);

      n1 = this.perlin.get3(new THREE.Vector3(x + eps, y, z));
      n2 = this.perlin.get3(new THREE.Vector3(x - eps, y, z));

      b = (n1 - n2) / (2 * eps);

      curl.y = a - b;

      n1 = this.perlin.get3(new THREE.Vector3(x + eps, y, z));
      n2 = this.perlin.get3(new THREE.Vector3(x - eps, y, z));

      a = (n1 - n2) / (2 * eps);

      n1 = this.perlin.get3(new THREE.Vector3(x, y + eps, z));
      n2 = this.perlin.get3(new THREE.Vector3(x, y + eps, z));

      b = (n1 - n2) / (2 * eps);

      curl.z = a - b;

      return curl;
    }
  }

  /////////////
  // flow field
  /////////////
  class FlowField {
    field: any[];
    size: number;
    constructor(size: number) {
      this.size = size;
      this.field = [];

      let noise = new PerlinNoise(Math.E);
      for (let x = 0; x < size; ++x) {
        this.field[x] = [];

        for (let y = 0; y < size; ++y) {
          this.field[x][y] = [];

          for (let z = 0; z < size; ++z) {
            let mod = 0.09;

            this.field[x][y][z] = noise.perlinNoise(x * mod, y * mod, z * mod);
          }
        }
      }
    }

    sample(x: number, y: number, z: number) {
      x = Math.round(x) + this.size / 2;
      y = Math.round(y) + this.size / 2;
      z = Math.round(z) + this.size / 2;

      return this.field[x] && this.field[x][y] && this.field[x][y][z]
        ? this.field[x][y][z]
        : undefined;
    }
  }

  ////////////
  // particles
  ////////////
  class Particles {
    flowField: FlowField;
    points: THREE.Points;
    velocities: THREE.Vector3[];

    constructor(num: number, flowField: FlowField) {
      this.flowField = flowField;
      this.velocities = [];
      let vertices = new Float32Array(num * 3);

      let colors = new Float32Array(num * 3); // Placeholder for colors, will be updated in update()
      let geometry = new THREE.BufferGeometry();
      let material = new THREE.PointsMaterial({
        size: PARTICLE_SIZE,
        vertexColors: true,
      });
      this.prideColors = [
        { color: new THREE.Color("red"), maxY: 1 },
        { color: new THREE.Color("orange"), maxY: 0.8 },
        { color: new THREE.Color("yellow"), maxY: 0.6 },
        { color: new THREE.Color("green"), maxY: 0.4 },
        { color: new THREE.Color("blue"), maxY: 0.2 },
        { color: new THREE.Color("purple"), maxY: 0 },
      ];

      for (var i = 0; i < num; i++) {
        vertices[i * 3] = Math.random() - 0.5;
        vertices[i * 3 + 1] = Math.random() - 0.5;
        vertices[i * 3 + 2] = Math.random() - 0.5;

        this.velocities.push(
          new THREE.Vector3(
            Math.random() - 0.5,
            Math.random() - 0.5,
            Math.random() - 0.5,
          ),
        );
      }

      geometry.setAttribute("position", new THREE.BufferAttribute(vertices, 3));
      geometry.setAttribute("color", new THREE.BufferAttribute(colors, 3));

      this.points = new THREE.Points(geometry, material);
    }

    update() {
      let positions = this.points.geometry.attributes.position;
      let colors = this.points.geometry.attributes.color;
      let numVertices: number = this.points.geometry.attributes.position.count;

      let maxY = -Infinity; // Start with the lowest possible value
      let minY = Infinity; // Start with the lowest possible value

      for (let i = 0; i < numVertices; i++) {
        const y = positions.getY(i); // Get the Y component of the i-th vertex
        if (y > maxY) {
          maxY = y; // Update maxY if this vertex's Y component is higher
        }
        if (y < minY) {
          minY = y; // Update maxY if this vertex's Y component is higher
        }
      }

      for (let i = 0; i < numVertices; ++i) {
        let vertex = new THREE.Vector3(
          this.points.geometry.attributes.position.getX(i),
          this.points.geometry.attributes.position.getY(i),
          0,
        );
        let velocity = this.velocities.at(i)!;
        var flow = this.flowField.sample(vertex.x, vertex.y, vertex.z);

        if (flow) {
          var steer = flow.clone().sub(velocity); // flow - velocity

          velocity.add(steer.multiplyScalar(0.01));
          vertex.add(velocity.multiplyScalar(0.999));
        } else {
          vertex.set(
            Math.random() - 0.5,
            Math.random() - 0.5,
            Math.random() - 0.5,
          );

          velocity.set(
            Math.random() - 0.5,
            Math.random() - 0.5,
            Math.random() - 0.5,
          );
        }
        this.velocities[i] = velocity;
        this.points.geometry.attributes.position.setXYZ(
          i,
          vertex.x,
          vertex.y,
          vertex.z,
        );

        const y = positions.getY(i);
        // Normalize y to [0, 1] range based on expected min/max y values
        const normalizedY = (vertex.y - minY * 0.5) / maxY;
        const color = this.mapToColor(normalizedY);
        positions.setXYZ(i, vertex.x, vertex.y, vertex.z);
        colors.setXYZ(i, color.r, color.g, color.b);
      }
      positions.needsUpdate = true;
      colors.needsUpdate = true;
    }

    mapToColor(y) {
      for (let i = 0; i < this.prideColors.length; i++) {
        // Check if the position is within the current color's range
        if (y >= this.prideColors[i].maxY) {
          // Check if we're not at the last color and need to interpolate
          if (i > 0) {
            const color = this.prideColors[i - 1].color.clone();
            // Calculate the interpolation factor
            // It's important to subtract the maxY of the current color from y, and then divide by the difference
            // between the maxY values of the current and next colors.
            const factor =
              (y - this.prideColors[i].maxY) /
              (this.prideColors[i - 1].maxY - this.prideColors[i].maxY);
            // Lerp (linearly interpolate) between the current color and the next
            color.lerp(this.prideColors[i].color, 1 - factor);
            return color;
          }
          return this.prideColors[i].color;
        }
      }
      // Return the last color by default if none matched
      return this.prideColors[this.prideColors.length - 1].color;
    }
  }

  function setup() {
    // canvas
    canvas = document.getElementById("canvas")!;
    width = canvas.getBoundingClientRect().width;
    height = canvas.getBoundingClientRect().height;

    // scene
    scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0x000, 20, 1000);

    // camera
    camera = new THREE.PerspectiveCamera(75, width / height);
    camera.position.setY(10);
    camera.position.setZ(50);

    // renderer
    renderer = new THREE.WebGLRenderer({ alpha: true });
    renderer.setSize(width, height);

    // particles
    let flowField = new FlowField(SIZE_FLOWFIELD);
    particles = new Particles(NUM_PARTICLES, flowField);
    //particles.points.rotateX(10);
    //particles.points.rotateY(10);
    scene.add(particles.points);

    canvas.appendChild(renderer.domElement);
  }

  let rotateSpeed;
  function animate() {
    requestAnimationFrame(animate);
    particles.update();
    if (scrollType === "UP") {
      rotateSpeed = 0.01;
    } else if (scrollType === "DOWN") {
      rotateSpeed = -0.01;
    } else {
      rotateSpeed = 0.001;
    }
    //particles.points.rotateX(rotateSpeed);
    //particles.points.rotateY(rotateSpeed);
    renderer.render(scene, camera);
  }

  function handleResize() {
    width = canvas.getBoundingClientRect().width;
    height = canvas.getBoundingClientRect().height;
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
  }

  let prevScroll: number = 0;
  let currentScroll: number = 0;
  let windowHeight: number = window.innerHeight;
  let windowWidth: number = window.innerWidth;
  let recent: HTMLElement = document.getElementById("speaker Series")!;

  function handleScroll() {
    prevScroll = currentScroll;
    currentScroll = window.scrollY;

    // from right to left (on tablet, desktop)
    if (windowWidth > 630) {
      camera.position.setX(
        Math.min(-30 + (120 / windowHeight) * currentScroll, 30),
      );
      // reduce opacity
      if (recent.getBoundingClientRect().top - windowHeight < 0) {
        canvas.style.opacity = `${Math.max(
          20,
          100 - Math.abs(recent.getBoundingClientRect().top - windowHeight) / 8,
        )}%`;
      } else {
        canvas.style.opacity = "100%";
      }

      // scene rotates depending on scroll direction
      if (prevScroll > currentScroll) {
        scrollType = "UP";
      } else {
        scrollType = "DOWN";
      }

      setTimeout(() => {
        scrollType = "";
      }, 100);
    } else {
      camera.position.setX(0);
      canvas.style.opacity = "50%";
    }
  }

  setup();
  handleScroll();
  animate();

  addEventListener("resize", handleResize);
  addEventListener("scroll", handleScroll);
</script>
