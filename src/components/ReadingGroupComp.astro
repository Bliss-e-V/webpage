---
import Card from "@components/Card.astro";
import {
    dayToPapers,
    Paper,
    readingGroupSections,
} from "@components/data/papers";

const today = new Date().toISOString().split("T")[0];

const futurePapers = Object.entries(dayToPapers)
    .filter(([date, papers]) => date >= today)
    .reduce((obj, [date, papers]) => {
        obj[date] = papers;
        return obj;
    }, {} as Record<string, any>);
const futurePaperList = Object.entries(futurePapers)
    .sort(([date1], [date2]) => date1.localeCompare(date2))
    .map(([, event]) => event)
    .flat() as Paper[];

const pastPapers = Object.entries(dayToPapers)
    .filter(([date, papers]) => date < today)
    .reduce((obj, [date, papers]) => {
        obj[date] = papers;
        return obj;
    }, {} as Record<string, any>);
const pastPaperList = Object.entries(pastPapers)
    .sort(([date1], [date2]) => date2.localeCompare(date1))
    .map(([, event]) => event) as Paper[][];

// Group papers by section
const getPapersInDateRange = (
    startDate: Date,
    endDate: Date,
    papers: Paper[][],
) => {
    return papers.filter((paperGroup) => {
        const paperDate = paperGroup[0].readingDay;
        return paperDate >= startDate && paperDate <= endDate;
    });
};
---

<div>
    <h1
        class="text-4xl sm:text-5xl text-transparent bg-clip-text bg-red-right font-bold"
    >
        Reading Group
    </h1>
    <div
        class="w-full mb-10 max-w-full border-b sm:border-b-0 h-[0px] sm:h-[1px] bg-gradient-to-r from-gray-200 to-transparent ..."
    >
    </div>

    <div class="mb-10">
        <div class="mb-4">
            Get ready for Winter Semester 2025/26!
        </div><div class="mb-4">
            This time, Tillmann Rheude, Leonhard Kohleick, and Benjamin Wild from Berlin Institute of Health at Charit√© will co-host a reading group on the <strong>variety of machine learning in healthcare</strong>. Join us for discussions about state of the art research on medical image segmentation, timeseries learning, multimodal representations, and more!
        </div><div class="mb-4">
            üìç <a href="https://maps.app.goo.gl/4eqs9zTgEi9E9pbv5" target="_blank"><strong>Merantix AI Campus</strong> (Max-Urich-Stra√üe 3, 13355 Berlin)</a>
        </div><div class="mb-4">
            üïñ <a
                href=""
                id="download-ical"
                title="Download calendar events"
            >
                <strong>Every Monday, 18:45</strong> (Add to Calendar)
            </a>
        </div>
    </div>

    {
        futurePaperList.length > 0 && (
            <div class="my-2">
                <h2 class="text-3xl sm:text-5xl text-transparent bg-clip-text bg-red-right font-bold">
                    Upcoming
                </h2>
                <div class="flex items-center justify-center flex-col mt-2 sm:mt-4">
                    <div class="w-10/12">
                        {futurePaperList.map((paper, i) => (
                            <Card
                                paper={paper}
                                hasBorder={i === futurePaperList.length - 1}
                            />
                        ))}
                    </div>
                </div>
            </div>
        )
    }

    <div class="my-2 mt-4">
        <h2
            class="text-3xl sm:text-5xl text-transparent bg-clip-text bg-red-right font-bold"
        >
            Past Papers
        </h2>
        <div class="flex items-center justify-center flex-col mt-2 sm:mt-4">
            {
                readingGroupSections.reverse().map((section) => {
                    const sectionPapers = getPapersInDateRange(
                        section.startDate,
                        section.endDate,
                        pastPaperList,
                    );

                    if (sectionPapers.length === 0) return null;
                    const years = section.startDate.getFullYear() === section.endDate.getFullYear() ? section.startDate.getFullYear() : `${section.startDate.getFullYear()} - ${section.endDate.getFullYear()}`;

                    return (
                        <div class="w-10/12 border border-gray-200 rounded-lg p-4 m-4 bg-neutral-950">
                            <details class="group mb-4">
                                <summary class="cursor-pointer list-none">
                                    <div class="flex justify-between items-center">
                                        <div>
                                            <h3 class="text-2xl font-semibold mb-2">
                                                {section.title}
                                            </h3>
                                            <p class="text-secondary">
                                                by {section.host}, {years}
                                            </p>
                                        </div>
                                        <div class="transform group-open:rotate-180 transition-transform">
                                            <svg
                                                width="24"
                                                height="24"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor"
                                            >
                                                <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    stroke-width="2"
                                                    d="M19 9l-7 7-7-7"
                                                />
                                            </svg>
                                        </div>
                                    </div>
                                    <p class="text-secondary">
                                        {section.description}
                                    </p>
                                </summary>
                                <div class="mt-4">
                                    {sectionPapers.map((papers) =>
                                        papers.map((paper, i) => (
                                            <Card
                                                paper={paper}
                                                hasBorder={
                                                    i === papers.length - 1
                                                }
                                            />
                                        )),
                                    )}
                                </div>
                            </details>
                        </div>
                    );
                })
            }
            {
                pastPaperList.length === 0 && (
                    <div class="text-secondary">No past papers available.</div>
                )
            }
        </div>
    </div>
</div>

<style>
    details > summary::-webkit-details-marker {
        display: none;
    }
</style>

<script define:vars={{ upcomingPapers: futurePaperList }}>
    // iCal generation utility functions
    function formatDateForICal(date) {
        // Use a more reliable date formatting approach
        const d = new Date(date);
        const year = d.getFullYear();
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        const hours = String(d.getHours()).padStart(2, '0');
        const minutes = String(d.getMinutes()).padStart(2, '0');
        const seconds = String(d.getSeconds()).padStart(2, '0');
        return `${year}${month}${day}T${hours}${minutes}${seconds}`;
    }

    function escapeICalText(text) {
        return text
            .replace(/\\/g, '\\\\')
            .replace(/;/g, '\\;')
            .replace(/,/g, '\\,')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '');
    }

    function foldLine(line, maxLength = 75) {
        if (line.length <= maxLength) return line;
        const lines = [];
        let current = line;
        while (current.length > maxLength) {
            lines.push(current.substring(0, maxLength));
            current = ' ' + current.substring(maxLength);
        }
        if (current.length > 0) {
            lines.push(current);
        }
        return lines.join('\r\n');
    }

    function generateEventICal(event) {
        const startDate = formatDateForICal(event.startDate);
        const endDate = formatDateForICal(event.endDate);

        // Create a reproducible UID based on date only (i.e. max one reading group per day)
        const eventKey = event.startDate.toISOString().split('T')[0];
        const uid = `${eventKey}@bliss-reading-group`;
        const timestamp = formatDateForICal(new Date());

        const lines = [
            'BEGIN:VEVENT',
            `UID:${uid}`,
            `DTSTAMP:${timestamp}`,
            `DTSTART;TZID=Europe/Berlin:${startDate}`,
            `DTEND;TZID=Europe/Berlin:${endDate}`,
            `SUMMARY:${escapeICalText(event.title)}`,
            `DESCRIPTION:${escapeICalText(event.description)}`,
            `LOCATION:${escapeICalText(event.location)}`,
            'ORGANIZER:CN=BLISS',
            'STATUS:CONFIRMED',
            'TRANSP:OPAQUE',
            'SEQUENCE:0'
        ];

        if (event.url) {
            lines.push(`URL:${event.url}`);
        }

        lines.push('END:VEVENT');

        return lines.map(line => foldLine(line)).join('\r\n');
    }

    function generateICalContent(events) {
        const header = [
            'BEGIN:VCALENDAR',
            'VERSION:2.0',
            'PRODID:-//BLISS Reading Group//Reading Group Events//EN',
            'CALSCALE:GREGORIAN',
            'METHOD:PUBLISH',
            'X-WR-CALNAME:BLISS Reading Group',
            'X-WR-CALDESC:Reading Group Events',
            'X-WR-TIMEZONE:Europe/Berlin'
        ].join('\r\n');

        const eventContent = events.map(generateEventICal).join('\r\n');

        const footer = 'END:VCALENDAR';

        return [header, eventContent, footer].join('\r\n');
    }

    function downloadICal(content, filename = 'bliss-reading-group.ics') {
        const blob = new Blob([content], { type: 'text/calendar;charset=utf-8' });
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        link.style.display = 'none';

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        URL.revokeObjectURL(url);
    }

    function generateReadingGroupEvents(papers, location = 'Merantix AI Campus, Max-Urich-Stra√üe 3, 13355 Berlin', startTime = '18:45', duration = 75) {
        return papers.map(paper => {
            // Ensure we have a proper Date object
            const paperDate = new Date(paper.readingDay);
            if (isNaN(paperDate.getTime())) {
                console.error('Invalid date for paper:', paper.name, paper.readingDay);
                return null;
            }

            const startDate = new Date(paperDate);
            const [hours, minutes] = startTime.split(':').map(Number);
            startDate.setHours(hours, minutes, 0, 0);

            const endDate = new Date(startDate);
            endDate.setMinutes(endDate.getMinutes() + duration);

            const description = [
                `BLISS Reading Group: ${paper.name}`,
                '',
                `Paper: ${paper.link}`,
                '',
                'Please check the website for updates: https://bliss.berlin/reading-group',
            ].join('\n');

            return {
                title: `BLISS Reading Group: ${paper.name}`,
                description,
                startDate,
                endDate,
                location,
                url: paper.link
            };
        }).filter(event => event !== null);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const downloadButton = document.getElementById('download-ical');

        if (downloadButton && upcomingPapers && upcomingPapers.length > 0) {
            downloadButton.addEventListener('click', () => {
                const events = generateReadingGroupEvents(
                    upcomingPapers,
                    'Merantix AI Campus, Max-Urich-Stra√üe 3, 13355 Berlin',
                    '18:45',
                    75
                );

                const icalContent = generateICalContent(events);
                downloadICal(icalContent, 'bliss-reading-group-upcoming.ics');
            });
        }
    });
</script>
