---
import Badge from "@components/Badge";
const anchorLinks: string[] = ["activities", "recent", "newsletter"];

const { headerTitle } = Astro.props;
---

<div
  id="header"
  class="fixed top-0 flex w-full h-40 items-center justify-center border-b border-transparent duration-500 select-none z-40"
>
  <div class="container flex justify-between">
    <div class="flex items-center justify-start space-x-[110px]">
      <a id="logo" href="/" class="group relative">
        <img src="/assets/aitu.png" height={60} width={60} />
        <p
          class="opacity-0 absolute bg-accent-dark text-accent text-sm text-center font-medium rounded-md mx-auto left-0 right-0 group-hover:opacity-100 transition-opacity duration-300"
        >
          Home
        </p>
      </a>
      <h2
        id="animatedTitle"
        class="hidden truncate w-[450px] lg:block text-2xl translate-y-4 opacity-0 transition-all"
      >
        {headerTitle}
      </h2>
    </div>
    <div id="menu" class="flex items-center space-x-6">
      {
        anchorLinks.map((link: string) => {
          return (
            <a
              id={`${link}Link`}
              href={`/#${link}`}
              class="text-sm sm:text-base nounderline hidden sm:block text-secondary hover:text-primary transition-colors duration-300 tracking-wider"
            >
              <p>{link.at(0)?.toUpperCase() + link.slice(1)}</p>
            </a>
          );
        })
      }
      <a
        id="blogLink"
        href="/blog"
        class="nounderline text-secondary hover:text-primary transition-colors tracking-wider"
      >
        <p>Blog</p>
      </a>
      <Badge id="joinLink" hover>
        <a href="/join" class="nounderline">Join</a>
      </Badge>
    </div>
  </div>
</div>

<style>
  #join-link:hover {
    text-decoration-color: transparent;
  }
</style>

<script>
  let windowWidth = window.innerWidth;

  // header
  const header = document.getElementById("header")!;

  // animated title
  const animatedTitle: HTMLElement = document.getElementById("animatedTitle")!;

  // link animation
  const activities: HTMLElement = document.getElementById("activities")!;
  const activitiesLink: HTMLElement =
    document.getElementById("activitiesLink")!;

  const recent: HTMLElement = document.getElementById("recent")!;
  const recentLink: HTMLElement = document.getElementById("recentLink")!;

  const newsletter: HTMLElement = document.getElementById("newsletter")!;
  const newsletterLink: HTMLElement =
    document.getElementById("newsletterLink")!;

  const blogLink: HTMLElement = document.getElementById("blogLink")!;

  const sections: HTMLElement[] = [activities, recent, newsletter];
  const links: HTMLElement[] = [activitiesLink, recentLink, newsletterLink];

  function animateHeader() {
    if (window.scrollY > 50) {
      header.classList.remove("h-40");
      header.classList.add("h-20");
      header.classList.add("backdrop-blur-md");
      header.classList.add("border-border");
      header.classList.remove("border-transparent");
    } else {
      header.classList.remove("h-20");
      header.classList.add("h-40");
      header.classList.remove("backdrop-blur-md");
      header.classList.remove("border-border");
      header.classList.add("border-transparent");
    }
  }

  function animateBlogTitle() {
    if (windowWidth > 630) {
      if (window.scrollY > 300) {
        animatedTitle.classList.add("opacity-100");
        animatedTitle.classList.remove("translate-y-4");
      } else {
        animatedTitle.classList.remove("opacity-100");
        animatedTitle.classList.add("translate-y-4");
      }
    }
  }

  function animateLinks() {
    const buffer = 300;
    let sectionIdInView: number = -1;
    let closestToBuffer: number = -20000000;
    sections.forEach((section: HTMLElement, i: number) => {
      let top = section?.getBoundingClientRect().top;
      if (top < buffer && top > closestToBuffer) {
        closestToBuffer = top;
        sectionIdInView = i;
      }
    });

    links.forEach((_: HTMLElement, i: number) => {
      if (i == sectionIdInView) {
        links[i].classList.remove("text-secondary");
      } else {
        links[i].classList.add("text-secondary");
      }
    });
  }

  function handleRoute() {
    if (document.URL.includes("blog")) {
      blogLink.classList.add("text-primary");
      blogLink.classList.remove("text-secondary");
    } else {
      blogLink.classList.add("text-secondary");
      blogLink.classList.remove("text-primary");
    }
  }

  function handleScroll() {
    animateHeader();
    animateBlogTitle();
    animateLinks();
  }

  function handleResize() {
    windowWidth = window.innerWidth;
  }

  animateHeader();
  animateBlogTitle();
  animateLinks();
  handleRoute();
  document.addEventListener("scroll", handleScroll);
  document.addEventListener("resize", handleResize);
</script>
