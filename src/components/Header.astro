---
import Badge from "@components/Badge";
const anchorLinks: string[] = ["Partners", "speaker Series"];

const showHackathon = false;
---

<div
  id="header"
  class="fixed top-0 z-40 flex items-center justify-center w-full h-40 border-b border-transparent bg-black/70 select-none duration-500 mr-10 ml-10"
>
  <div class="container flex justify-between">
    <div class="flex items-center justify-start space-x-[50px]">
      <a id="logo" href="/" class="relative group">
        <img
          alt="bliss logo"
          src="/assets/bliss-logo.png"
          height={80}
          width={80}
        />
        <p
          class="absolute left-0 right-0 mx-auto text-sm font-medium text-center opacity-0 bg-accent-dark text-accent rounded-md group-hover:opacity-100 transition-opacity duration-300"
        >
          Home
        </p>
      </a>
    </div>
    <div id="menu" class="flex items-center space-x-7">
      {
        showHackathon && (
          <a
            id={`HackathonLink`}
            href={`/blissathon`}
            class="hidden text-sm tracking-wider sm:text-base nounderline sm:block text-secondary hover:text-primary transition-colors duration-300"
          >
            <p class="bg-accent-dark text-accent rounded-md px-2 text-lg hover:shadow-accent-small transition-shadow">
              Hackathon
            </p>
          </a>
        )
      }
      {
        anchorLinks.map((link: string) => {
          return (
            <a
              id={`${link}Link`}
              href={`/#${link}`}
              class="hidden text-sm tracking-wider sm:text-base nounderline sm:block text-secondary hover:text-primary transition-colors duration-300"
            >
              <p>
                {link
                  .split("-")
                  .map((subword: string) => {
                    return subword.at(0)?.toUpperCase() + subword.slice(1);
                  })
                  .join(" ")}
              </p>
            </a>
          );
        })
      }
      <a
        id="readingGroupLink"
        href="/reading-group"
        class="tracking-wider nounderline text-secondary hover:text-primary transition-colors"
      >
        <p>Reading Group</p>
      </a>
      <a
        id="mediaLink"
        href="/media"
        class="tracking-wider nounderline text-secondary hover:text-primary transition-colors"
      >
        <p>Media</p>
      </a>
    </div>
  </div>
</div>

<style>
  #join-link:hover {
    text-decoration-color: transparent;
  }
</style>

<script>
  let windowWidth = window.innerWidth;

  // header
  const header = document.getElementById("header")!;

  // link animation
  const speakerSeries: HTMLElement = document.getElementById("speaker Series")!;
  const partners: HTMLElement = document.getElementById("Partners")!;
  const speakerSeriesLink: HTMLElement =
    document.getElementById("speaker SeriesLink")!;
  const readingGroupLink: HTMLElement =
    document.getElementById("readingGroupLink")!;
  const partnersLink: HTMLElement = document.getElementById("PartnersLink")!;
  
  const sections: HTMLElement[] = [speakerSeries, partners];
  const links: HTMLElement[] = [speakerSeriesLink, partnersLink];

  function animateHeader() {
    if (window.scrollY > 0) {
      header.classList.remove("h-40");
      header.classList.add("h-20");
      header.classList.add("backdrop-blur-md");
      header.classList.add("border-border");
      header.classList.remove("border-transparent");
    } else {
      header.classList.remove("h-20");
      header.classList.add("h-40");
      header.classList.remove("backdrop-blur-md");
      header.classList.remove("border-border");
      header.classList.add("border-transparent");
    }
  }

  function animateLinks() {
    const buffer = 300;
    let sectionIdInView: number = -1;
    let closestToBuffer: number = -20000000;
    sections.forEach((section: HTMLElement, i: number) => {
      let top = section?.getBoundingClientRect().top;
      if (top < buffer && top > closestToBuffer) {
        closestToBuffer = top;
        sectionIdInView = i;
      }
    });

    links.forEach((_: HTMLElement, i: number) => {
      if (i == sectionIdInView) {
        links[i].classList.remove("text-secondary");
      } else {
        links[i].classList.add("text-secondary");
      }
    });
  }

  function handleRoute() {
    if (document.URL.includes("blog")) {
      readingGroupLink.classList.add("text-primary");
      readingGroupLink.classList.remove("text-secondary");
    } else {
      readingGroupLink.classList.add("text-secondary");
      readingGroupLink.classList.remove("text-primary");
    }
  }

  function handleScroll() {
    animateHeader();
    animateLinks();
  }

  function handleResize() {
    windowWidth = window.innerWidth;
  }

  animateHeader();
  animateLinks();
  handleRoute();
  document.addEventListener("scroll", handleScroll);
  document.addEventListener("resize", handleResize);
</script>
