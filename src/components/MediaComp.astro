---
import { dayToMediaItems, MediaItem } from "@components/data/media";
import ClientVideoEmbed from "@components/ClientVideoEmbed.astro";

const allMedia = Object.entries(dayToMediaItems)
  .sort(([date1], [date2]) => date1.localeCompare(date2))
  .map(([, event]) => event)
  .reverse() as MediaItem[][];
const flatMedia = allMedia.flat();
const winterMediaItems = flatMedia.filter((item) => {
  const itemDate = new Date(item.date);
  return itemDate >= new Date("2024-09-01") && itemDate <= new Date("2025-03-31");
});
const summerMediaItems = flatMedia.filter((item) => {
  const itemDate = new Date(item.date);
  return itemDate >= new Date("2024-04-01") && itemDate <= new Date("2024-08-31");
});
const winterMediaJSON = JSON.stringify(winterMediaItems);
const summerMediaJSON = JSON.stringify(summerMediaItems);
---

<div>
  <h1 class="text-4xl sm:text-5xl text-transparent bg-clip-text bg-red-right font-bold">Media</h1>
  <div class="w-full mb-10 max-w-full border-b sm:border-b-0 h-[0px] sm:h-[1px] bg-gradient-to-r from-gray-200 to-transparent"></div>
  
  <div class="mb-10">
    <div>Welcome to the Media section. Here you will find various media items related to our activities.</div>
    <div>Below you will find the list of media items. Please check back regularly for updates.</div>
  </div>

  <!-- Winter Section -->
  <div class="my-2">
    <details class="group mb-4" open>
      <summary class="cursor-pointer list-none">
        <div class="flex justify-between items-center">
          <h2 class="text-3xl sm:text-5xl text-transparent bg-clip-text bg-red-right font-bold">Season: Winter 2024/25</h2>
          <div class="transform group-open:rotate-180 transition-transform">
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
      </summary>
      <div class="flex items-center justify-center flex-col mt-2 sm:mt-4">
        {winterMediaItems.map((item) => (
          <div class="w-10/12 mt-4">
            <div class="card p-4 bg-black rounded-lg shadow-md hover:bg-li {item.hasBorder ? 'border-b border-gray-700' : ''}">
              <h3 class="text-2xl font-bold text-white">{item.title || "Untitled"}</h3>
              <p class="text-sm text-gray-300">By {item.speaker || "Unknown"}</p>
              <p class="text-sm text-gray-300">Date: {new Date(item.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: '2-digit' })}</p>
              
              <!-- Speaker Introduction -->
              {item.speakerIntro && (
                <details class="detail-item mt-2">
                  <summary class="text-sm text-gray-300 font-semibold flex items-center cursor-pointer">
                    <span>Speaker Introduction</span>
                    <svg class="ml-2 w-4 h-4 transform transition-transform detail-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </summary>
                  <p class="text-sm text-gray-300 mt-2">{item.speakerIntro}</p>
                </details>
              )}
              
              <!-- Abstract -->
              {item.abstract && (
                <details class="detail-item mt-2">
                  <summary class="text-sm text-gray-300 font-semibold flex items-center cursor-pointer">
                    <span>Abstract</span>
                    <svg class="ml-2 w-4 h-4 transform transition-transform detail-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </summary>
                  <p class="text-gray-300 mt-2">{item.abstract}</p>
                </details>
              )}
              
              <!-- Media Content -->
              <div class="mt-4">
                <div class="carousel-container relative">
                  <div class="carousel flex overflow-x-auto space-x-4">
                    {item.videoLink && item.videoLink.trim() !== "" && (
                      <div class="flex-none w-1/3 video-container">
                        <ClientVideoEmbed src={item.videoLink} title="YouTube video player" class="mb-4" />
                      </div>
                    )}
                    
                    {item.imageUrls && item.imageUrls.length > 0 && item.imageUrls.map((url) => (
                      <div class="flex-none w-1/3">
                        <img 
                          src={url} 
                          alt="Media image" 
                          class="w-full h-48 object-cover rounded-lg cursor-pointer hover:scale-105 transition-transform" 
                          onclick={`openMedia('image', '${url}')`}
                        />
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </details>
  </div>
  
  <!-- Summer Section -->
  <div class="my-2">
    <details class="group mb-4">
      <summary class="cursor-pointer list-none">
        <div class="flex justify-between items-center">
          <h2 class="text-3xl sm:text-5xl text-transparent bg-clip-text bg-red-right font-bold">Season: Summer 2024</h2>
          <div class="transform group-open:rotate-180 transition-transform">
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
      </summary>
      <div class="flex items-center justify-center flex-col mt-2 sm:mt-4">
        {summerMediaItems.map((item) => (
          <div class="w-10/12 mt-4">
            <div class="card p-4 bg-black rounded-lg shadow-md hover:bg-li {item.hasBorder ? 'border-b border-gray-700' : ''}">
              <h3 class="text-2xl font-bold text-white">{item.title || "Untitled"}</h3>
              <p class="text-sm text-gray-300">By {item.speaker || "Unknown"}</p>
              <p class="text-sm text-gray-300">Date: {new Date(item.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: '2-digit' })}</p>
              
              <!-- Speaker Introduction -->
              {item.speakerIntro && (
                <details class="detail-item mt-2">
                  <summary class="text-sm text-gray-300 font-semibold flex items-center cursor-pointer">
                    <span>Speaker Introduction</span>
                    <svg class="ml-2 w-4 h-4 transform transition-transform detail-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </summary>
                  <p class="text-sm text-gray-300 mt-2">{item.speakerIntro}</p>
                </details>
              )}
              
              <!-- Abstract -->
              {item.abstract && (
                <details class="detail-item mt-2">
                  <summary class="text-sm text-gray-300 font-semibold flex items-center cursor-pointer">
                    <span>Abstract</span>
                    <svg class="ml-2 w-4 h-4 transform transition-transform detail-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </summary>
                  <p class="text-gray-300 mt-2">{item.abstract}</p>
                </details>
              )}
              
              <!-- Media Content -->
              <div class="mt-4">
                <div class="carousel-container relative">
                  <div class="carousel flex overflow-x-auto space-x-4">
                    {item.videoLink && item.videoLink.trim() !== "" && (
                      <div class="flex-none w-1/3 video-container">
                        <ClientVideoEmbed src={item.videoLink} title="YouTube video player" class="mb-4" />
                      </div>
                    )}
                    
                    {item.imageUrls && item.imageUrls.length > 0 && item.imageUrls.map((url) => (
                      <div class="flex-none w-1/3">
                        <img 
                          src={url} 
                          alt="Media image" 
                          class="w-full h-48 object-cover rounded-lg cursor-pointer hover:scale-105 transition-transform" 
                          onclick={`openMedia('image', '${url}')`}
                        />
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </details>
  </div>

  <!-- Media Popup -->
  <div id="imagePopup" class="image-popup" style="display: none;">
    <div class="popup-content">
      <button class="close-popup" onclick="closePopup()">&times;</button>
      <button class="popup-nav popup-left" onclick="popupPrev()">&#10094;</button>
      <div id="popupMedia"></div>
      <button class="popup-nav popup-right" onclick="popupNext()">&#10095;</button>
    </div>
  </div>
</div>

<script>
  // Store media items for navigation in popup
  interface MediaItem {
    type: 'video' | 'image';
    url: string;
  }
  
  let currentPopupItems: MediaItem[] = [];
  let currentPopupIndex = 0;
  
  // Media popup functions
  function openMedia(type: 'video' | 'image', url: string) {
    const popup = document.getElementById('imagePopup');
    const popupMedia = document.getElementById('popupMedia');
    
    if (!popup || !popupMedia) return;
    
    popupMedia.innerHTML = '';
    
    if (type === 'video') {
      const wrapper = document.createElement('div');
      wrapper.className = "video-wrapper";
      
      // Instead of creating an iframe directly, set its HTML to avoid CORS issues
      if(url.includes("youtube.com/embed/")) {
        const baseUrl = url.split('?')[0];
        const params = new URLSearchParams(url.includes('?') ? url.split('?')[1] : '');
        
        // Set essential parameters for CORS
        params.set('origin', window.location.origin);
        params.set('enablejsapi', '1');
        
        const videoSrc = `${baseUrl}?${params.toString()}`;
        
        wrapper.innerHTML = `
          <iframe
            src="${videoSrc}"
            frameborder="0"
            allowfullscreen
            loading="lazy"
          ></iframe>
        `;
      }
      
      popupMedia.appendChild(wrapper);
    } else {
      const img = document.createElement('img');
      img.src = url;
      img.className = "popup-img";
      img.setAttribute("loading", "lazy");
      popupMedia.appendChild(img);
    }
    
    // Collect all media items from the card for navigation
    const card = (event?.target as HTMLElement)?.closest('.card');
    if (card) {
      const videoElements = card.querySelectorAll('iframe');
      const imageElements = card.querySelectorAll('img'); // Get all images
      currentPopupItems = [];
      
      videoElements.forEach((iframe: HTMLIFrameElement) => {
        if (iframe.src) {
          currentPopupItems.push({ type: 'video', url: iframe.src });
        }
      });
      
      imageElements.forEach((img: HTMLImageElement) => {
        if (img.src && !img.classList.contains('popup-img')) {
          currentPopupItems.push({ type: 'image', url: img.src });
        }
      });
      
      // Set current index
      currentPopupIndex = currentPopupItems.findIndex(item => item.url === url);
    }
    
    popup.style.display = 'flex';
    
    // Using PointerEvent API instead of deprecated MouseEvent properties
    popup.addEventListener('pointerdown', (e) => {
      if (e instanceof PointerEvent && e.target instanceof Element && e.target.id === 'imagePopup') {
        closePopup();
      }
    }, { once: true });
  }
  
  function closePopup() {
    const popup = document.getElementById('imagePopup');
    if (popup) {
      // Clean up any iframe resources to prevent memory leaks
      const iframes = popup.querySelectorAll('iframe');
      iframes.forEach((iframe: HTMLIFrameElement) => {
        iframe.src = 'about:blank';
      });
      popup.style.display = 'none';
    }
  }
  
  function popupPrev() {
    if (currentPopupItems.length > 0) {
      currentPopupIndex = (currentPopupIndex - 1 + currentPopupItems.length) % currentPopupItems.length;
      updatePopupContent();
    }
  }
  
  function popupNext() {
    if (currentPopupItems.length > 0) {
      currentPopupIndex = (currentPopupIndex + 1) % currentPopupItems.length;
      updatePopupContent();
    }
  }
  
  function updatePopupContent() {
    const popupMedia = document.getElementById('popupMedia');
    if (!popupMedia) return;
    
    popupMedia.innerHTML = "";
    
    if (currentPopupItems.length > 0 && currentPopupIndex >= 0 && currentPopupIndex < currentPopupItems.length) {
      const item = currentPopupItems[currentPopupIndex];
      if (item.type === "video") {
        const wrapper = document.createElement('div');
        wrapper.className = "video-wrapper";
        // Instead of creating an iframe directly, set its HTML to avoid CORS issues
        if(item.url.includes("youtube.com/embed/")) {
          const baseUrl = item.url.split('?')[0];
          const params = new URLSearchParams(item.url.includes('?') ? item.url.split('?')[1] : '');
          
          // Set essential parameters for CORS
          params.set('origin', window.location.origin);
          params.set('enablejsapi', '1');
          
          const videoSrc = `${baseUrl}?${params.toString()}`;
          
          wrapper.innerHTML = `
            <iframe
              src="${videoSrc}"
              frameborder="0"
              allowfullscreen
              loading="lazy"
            ></iframe>
          `;
        }
        popupMedia.appendChild(wrapper);
      } else {
        const img = document.createElement('img');
        img.src = item.url;
        img.className = "popup-img";
        img.setAttribute("loading", "lazy");
        popupMedia.appendChild(img);
      }
    }
  }
  
  // Add global event listeners
  document.addEventListener('DOMContentLoaded', () => {
    const popupElement = document.getElementById('imagePopup');
    if (popupElement) {
      // Use PointerEvent instead of MouseEvent properties
      popupElement.addEventListener('pointerdown', function(event) {
        if (event instanceof PointerEvent && event.target instanceof Element && event.target.id === 'imagePopup') {
          closePopup();
        }
      });
    }
    
    document.addEventListener('keydown', function(event) {
      const popup = document.getElementById('imagePopup');
      if (popup && popup.style.display !== 'none') {
        if (event.key === 'Escape') {
          closePopup();
        } else if (event.key === 'ArrowLeft') {
          popupPrev();
        } else if (event.key === 'ArrowRight') {
          popupNext();
        }
      }
    });
    
    // Handle detail item arrows rotation
    const detailItems = document.querySelectorAll('.detail-item');
    detailItems.forEach(item => {
      item.addEventListener('toggle', () => {
        const arrow = item.querySelector('.detail-arrow');
        if (arrow) {
          if (item.hasAttribute('open')) {
            arrow.classList.add('rotate-180');
          } else {
            arrow.classList.remove('rotate-180');
          }
        }
      });
    });
  });
  
  // Expose functions to global scope
  declare global {
    interface Window {
      openMedia: (type: 'video' | 'image', url: string) => void;
      closePopup: () => void;
      popupPrev: () => void;
      popupNext: () => void;
    }
  }
  
  window.openMedia = openMedia;
  window.closePopup = closePopup;
  window.popupPrev = popupPrev;
  window.popupNext = popupNext;
</script>

<style>
  .carousel-container {
    position: relative;
  }
  .carousel {
    scroll-behavior: smooth;
  }
  .image-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.75);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
  .popup-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  #popupMedia {
    max-width: 90vw;
    max-height: 90vh;
  }
  .popup-img {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
    border-radius: 4px;
    object-fit: contain;
    display: block;
  }
  .close-popup {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: #fff;
    z-index: 10000;
  }
  .popup-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0,0,0,0.5);
    border: none;
    color: #fff;
    font-size: 2rem;
    padding: 10px;
    cursor: pointer;
    z-index: 10000;
  }
  .popup-left {
    left: 10px;
  }
  .popup-right {
    right: 10px;
  }
  .video-wrapper {
    position: relative;
    width: 100%;
    max-width: 90vw;
    height: 0;
    padding-bottom: 56.25%;
  }
  .video-wrapper iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    border-radius: 4px;
  }
  .hover\:bg-li:hover {
    background-color: rgba(203, 45, 62, 0.25);
  }
  .detail-item .detail-arrow {
    transition: transform 0.3s ease;
  }
  
  .detail-item[open] .detail-arrow {
    transform: rotate(180deg);
  }
  
  details > summary::-webkit-details-marker {
    display: none;
  }
</style>
