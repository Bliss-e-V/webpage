---
import { dayToMediaItems, MediaItem } from "@components/data/media";
import MediaCard from "@components/MediaCard.astro";

const allMedia = Object.entries(dayToMediaItems)
  .sort(([date1], [date2]) => date1.localeCompare(date2))
  .map(([, event]) => event)
  .reverse() as MediaItem[][];
const flatMedia = allMedia.flat();
const summer25MediaItems = flatMedia.filter((item) => {
  const itemDate = new Date(item.date);
  return itemDate >= new Date("2025-04-01") && itemDate <= new Date("2025-08-31");
});
const winter2425MediaItems = flatMedia.filter((item) => {
  const itemDate = new Date(item.date);
  return itemDate >= new Date("2024-09-01") && itemDate <= new Date("2025-03-31");
});
const summer24MediaItems = flatMedia.filter((item) => {
  const itemDate = new Date(item.date);
  return itemDate >= new Date("2024-04-01") && itemDate <= new Date("2024-08-31");
});
const winterMediaJSON = JSON.stringify(winter2425MediaItems);
const summerMediaJSON = JSON.stringify(summer24MediaItems);
---

<div>
  <h1 class="text-4xl sm:text-5xl text-transparent bg-clip-text bg-red-right font-bold">Media</h1>
  <div class="w-full mb-10 max-w-full border-b sm:border-b-0 h-[0px] sm:h-[1px] bg-gradient-to-r from-gray-200 to-transparent"></div>
  
  <div class="mb-10">
    <div>Welcome to the Media section. Here you will find various media items related to our activities.</div>
    <div>Below you will find the list of media items organized by season. Click on a season to expand it and explore the events.</div>
    <div class="mt-2 text-sm text-gray-400 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
      </svg>
      <span>Pro tip: Click the link icon on any event to copy a direct link for sharing.</span>
    </div>
  </div>

  <!-- Season Definitions -->
  <div class="my-2">
    <MediaCard 
      title="Season: Summer 2025" 
      mediaItems={summer25MediaItems} 
      isOpenByDefault={true} 
    />
  </div>

  <div class="my-2">
    <MediaCard 
      title="Season: Winter 2024/25" 
      mediaItems={winter2425MediaItems} 
      isOpenByDefault={false} 
    />
  </div>
  
  <div class="my-2">
    <MediaCard 
      title="Season: Summer 2024" 
      mediaItems={summer24MediaItems} 
      isOpenByDefault={false} 
    />
  </div>

  <!-- Media Popup -->
  <div id="imagePopup" class="image-popup" style="display: none;">
    <div class="popup-content">
      <button class="close-popup" onclick="closePopup()">&times;</button>
      <button class="popup-nav popup-left" onclick="popupPrev()">&#10094;</button>
      <div id="popupMedia" class="swipeable-content">
        <div class="popup-loading flex items-center justify-center">
          <div class="loading-spinner"></div>
          <span class="ml-2 text-white">Loading media...</span>
        </div>
      </div>
      <button class="popup-nav popup-right" onclick="popupNext()">&#10095;</button>
    </div>
  </div>
</div>

<script>
  // Store media items for navigation in popup
  interface MediaItem {
    type: 'video' | 'image';
    url: string;
  }
  
  let currentPopupItems: MediaItem[] = [];
  let currentPopupIndex = 0;
  
  // Swipe gesture variables
  let touchStartX = 0;
  let touchEndX = 0;
  let lastSwipeTime = 0; // Track the time of the last swipe
  const swipeCooldown = 300; // Minimum milliseconds between swipes
  
  // Handle deep linking and URL hash navigation
  function handleDeepLink() {
    // Check if a hash exists in the URL
    if (location.hash) {
      const hash = location.hash.substring(1); // Remove the # character
      // If the hash starts with 'event-', it's an event deep link
      if (hash.startsWith('event-')) {
        const targetElement = document.getElementById(hash);
        if (targetElement) {
          // Find the parent season container
          const seasonContainer = targetElement.closest('.media-season');
          if (seasonContainer) {
            // Close all seasons first
            document.querySelectorAll('.media-season').forEach(season => {
              (season as HTMLDetailsElement).open = false;
            });
            // Open the parent season
            (seasonContainer as HTMLDetailsElement).open = true;
            // Scroll to the target element with a slight delay to allow the details to expand
            setTimeout(() => {
              targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
              // Remove highlight from all cards first
              document.querySelectorAll('.card').forEach(card => {
                (card as HTMLElement).classList.remove('highlight-target');
                (card as HTMLElement).style.background = '';
              });
              // Add persistent highlight to the linked card
              const card = targetElement.querySelector('.card');
              if (card) {
                card.classList.add('highlight-target');
                (card as HTMLElement).style.background = 'rgba(203, 45, 62, 0.25)';
              }
            }, 100);
          }
        }
      }
    }
  }
  
  // Copy the link to clipboard when the link icon is clicked
  function setupLinkCopyButtons() {
    document.querySelectorAll('.card a[href^="#event-"]').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const url = new URL(window.location.href);
        url.hash = (link as HTMLAnchorElement).getAttribute('href') || '';
        
        // Copy the full URL to clipboard
        navigator.clipboard.writeText(url.toString())
          .then(() => {
            // Show a temporary tooltip or notification
            const originalTitle = (link as HTMLElement).getAttribute('title');
            (link as HTMLElement).setAttribute('title', 'Link copied!');
            
            // Add visual feedback
            const oldColor = (link as HTMLElement).style.color;
            (link as HTMLElement).style.color = '#4CAF50'; // Success green
            
            // Create temporary tooltip
            const tooltip = document.createElement('div');
            tooltip.textContent = 'Link copied!';
            tooltip.style.position = 'absolute';
            tooltip.style.backgroundColor = '#333';
            tooltip.style.color = '#fff';
            tooltip.style.padding = '5px 10px';
            tooltip.style.borderRadius = '4px';
            tooltip.style.fontSize = '12px';
            tooltip.style.zIndex = '1000';
            tooltip.style.opacity = '0';
            tooltip.style.transition = 'opacity 0.3s';
            
            // Position the tooltip near the link
            const rect = (link as HTMLElement).getBoundingClientRect();
            tooltip.style.top = `${window.pageYOffset + rect.bottom + 5}px`;
            tooltip.style.left = `${window.pageXOffset + rect.left}px`;
            
            // Add to document and animate
            document.body.appendChild(tooltip);
            setTimeout(() => { tooltip.style.opacity = '1'; }, 10);
            
            // Remove tooltip and reset after animation
            setTimeout(() => {
              tooltip.style.opacity = '0';
              (link as HTMLElement).style.color = oldColor;
              (link as HTMLElement).setAttribute('title', originalTitle || 'Copy link to this event');
              setTimeout(() => tooltip.remove(), 300); // Remove after fade out
            }, 2000);
          })
          .catch(err => {
            console.error('Failed to copy link: ', err);
          });
      });
    });
  }
  
  // Media popup functions
  function openMedia(type: 'video' | 'image', url: string, event?: Event) {
    const popup = document.getElementById('imagePopup');
    const popupMedia = document.getElementById('popupMedia');
    
    if (!popup || !popupMedia) return;
    
    // Show loading indicator
    popupMedia.innerHTML = `
      <div class="popup-loading flex items-center justify-center">
        <div class="loading-spinner"></div>
        <span class="ml-2 text-white">Loading media...</span>
      </div>
    `;
    
    if (type === 'video') {
      const wrapper = document.createElement('div');
      wrapper.className = "video-wrapper popup-video"; // Add popup-video class
      
      // Instead of creating an iframe directly, set its HTML to avoid CORS issues
      if(url.includes("youtube.com/embed/")) {
        const baseUrl = url.split('?')[0];
        const params = new URLSearchParams(url.includes('?') ? url.split('?')[1] : '');
        
        // Set essential parameters for CORS
        params.set('origin', window.location.origin);
        params.set('enablejsapi', '1');
        
        const videoSrc = `${baseUrl}?${params.toString()}`;
        
        wrapper.innerHTML = `
          <iframe
            src="${videoSrc}"
            frameborder="0"
            allowfullscreen
            loading="lazy"
            onload="document.querySelector('.popup-loading')?.remove();"
          ></iframe>
        `;
      }
      
      popupMedia.innerHTML = '';
      popupMedia.appendChild(wrapper);
    } else {
      const img = document.createElement('img');
      img.src = url;
      img.className = "popup-img";
      img.setAttribute("loading", "lazy");
      img.onload = () => {
        const loadingEl = document.querySelector('.popup-loading');
        if (loadingEl) loadingEl.remove();
      };
      
      popupMedia.innerHTML = '';
      popupMedia.appendChild(img);
    }
    
    // Get the target element that was clicked
    const clickedElement = event?.target as HTMLElement || document.querySelector(`img[src="${url}"]`) as HTMLElement;
    if (!clickedElement) return;
    
    // Find the closest card container
    const card = clickedElement.closest('.card');
    if (card) {
      // Reset the items array
      currentPopupItems = [];
      
      // Get all media items in their DOM order from this specific card
      const carousel = card.querySelector('.carousel');
      if (carousel) {
        // For videos: First check for embedded iframes
        const videoContainers = carousel.querySelectorAll('.video-container');
        videoContainers.forEach(container => {
          const iframe = container.querySelector('iframe');
          if (iframe && iframe.src) {
            currentPopupItems.push({
              type: 'video',
              url: iframe.src
            });
          } else {
            // Look for ClientVideoEmbed custom component
            const embedContainer = container.querySelector('.video-embed');
            if (embedContainer) {
              const src = embedContainer.getAttribute('src');
              if (src) {
                currentPopupItems.push({
                  type: 'video',
                  url: src
                });
              }
            }
          }
        });
        
        // For images: Select all img elements that are inside the current carousel
        // and are not part of the popup interface
        const imgContainers = carousel.querySelectorAll('.media-item-container');
        imgContainers.forEach(container => {
          const img = container.querySelector('img.media-image') as HTMLImageElement;
          if (img && img.src) {
            currentPopupItems.push({
              type: 'image',
              url: img.src
            });
          }
        });
        
        // Backup: If no containers were found specifically, try to get all images directly
        if (currentPopupItems.length === 0) {
          const allImages = carousel.querySelectorAll('img.media-image');
          allImages.forEach(img => {
            if (img instanceof HTMLImageElement && img.src) {
              currentPopupItems.push({
                type: 'image',
                url: img.src
              });
            }
          });
        }
        
        // Set the current index based on the clicked URL
        currentPopupIndex = currentPopupItems.findIndex(item => item.url === url);
        if (currentPopupIndex === -1) currentPopupIndex = 0;
      }
    }
    
    // Show the popup
    popup.style.display = 'flex';
    
    // Add click event to close popup when clicking outside
    popup.addEventListener('pointerdown', (e) => {
      if (e instanceof PointerEvent && e.target instanceof Element && e.target.id === 'imagePopup') {
        closePopup();
      }
    }, { once: true });
    
    // Setup swipe gesture event listeners
    setupSwipeListeners();
  }
  
  function closePopup() {
    const popup = document.getElementById('imagePopup');
    if (popup) {
      // Clean up any iframe resources to prevent memory leaks
      const iframes = popup.querySelectorAll('iframe');
      iframes.forEach((iframe: HTMLIFrameElement) => {
        iframe.src = 'about:blank';
      });
      popup.style.display = 'none';
      
      // Remove swipe gesture listeners
      removeSwipeListeners();
    }
  }
  
  function popupPrev() {
    if (currentPopupItems.length > 0) {
      currentPopupIndex = (currentPopupIndex - 1 + currentPopupItems.length) % currentPopupItems.length;
      updatePopupContent();
    }
  }
  
  function popupNext() {
    if (currentPopupItems.length > 0) {
      currentPopupIndex = (currentPopupIndex + 1) % currentPopupItems.length;
      updatePopupContent();
    }
  }
  
  function updatePopupContent() {
    const popupMedia = document.getElementById('popupMedia');
    if (!popupMedia) return;
    
    // Show loading indicator
    popupMedia.innerHTML = `
      <div class="popup-loading flex items-center justify-center">
        <div class="loading-spinner"></div>
        <span class="ml-2 text-white">Loading media...</span>
      </div>
    `;
    
    if (currentPopupItems.length > 0 && currentPopupIndex >= 0 && currentPopupIndex < currentPopupItems.length) {
      const item = currentPopupItems[currentPopupIndex];

      if (item.type === "video") {
        const wrapper = document.createElement('div');
        wrapper.className = "video-wrapper popup-video";
        
        // Instead of creating an iframe directly, set its HTML to avoid CORS issues
        if(item.url.includes("youtube.com/embed/")) {
          const baseUrl = item.url.split('?')[0];
          const params = new URLSearchParams(item.url.includes('?') ? item.url.split('?')[1] : '');
          
          // Set essential parameters for CORS
          params.set('origin', window.location.origin);
          params.set('enablejsapi', '1');
          
          const videoSrc = `${baseUrl}?${params.toString()}`;
          
          wrapper.innerHTML = `
            <iframe
              src="${videoSrc}"
              frameborder="0"
              allowfullscreen
              loading="lazy"
              onload="document.querySelector('.popup-loading')?.remove();"
            ></iframe>
          `;
        }
        
        // Replace loading indicator with actual content
        popupMedia.innerHTML = '';
        popupMedia.appendChild(wrapper);
      } else {
        const img = document.createElement('img');
        img.src = item.url;
        img.className = "popup-img";
        img.setAttribute("loading", "lazy");
        
        // Add onload event to remove loading indicator
        img.onload = () => {
          const loadingEl = document.querySelector('.popup-loading');
          if (loadingEl) loadingEl.remove();
        };
        
        // Replace loading indicator
        popupMedia.innerHTML = '';
        popupMedia.appendChild(img);
      }
    }
  }
  
  // Swipe gesture handlers
  function handleTouchStart(e: TouchEvent) {
    touchStartX = e.changedTouches[0].screenX;
  }
  
  function handleTouchEnd(e: TouchEvent) {
    // Stop propagation to prevent multiple handlers from firing
    e.stopPropagation();
    
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }
  
  function handleSwipe() {
    const swipeThreshold = 50; // Minimum distance to be considered a swipe
    const swipeDistance = touchStartX - touchEndX;
    const now = Date.now();
    
    // Check if enough time has passed since the last swipe
    if (now - lastSwipeTime < swipeCooldown) {
      return;
    }
    
    if (Math.abs(swipeDistance) >= swipeThreshold) {
      lastSwipeTime = now; // Record the time of this swipe
      
      if (swipeDistance > 0) {
        // Swiped left, go to next
        popupNext();
      } else {
        // Swiped right, go to previous
        popupPrev();
      }
    }
  }
  
  function setupSwipeListeners() {
    // Remove any existing listeners first to avoid duplicates
    removeSwipeListeners();
    
    const popupContent = document.querySelector('.swipeable-content');
    if (popupContent) {
      popupContent.addEventListener('touchstart', handleTouchStart as EventListener, { passive: true });
      popupContent.addEventListener('touchend', handleTouchEnd as EventListener);
    }
    
    // Only add popup listener if we don't already have one on the content
    const popup = document.getElementById('imagePopup');
    if (popup && !popupContent) {
      popup.addEventListener('touchstart', handleTouchStart as EventListener, { passive: true });
      popup.addEventListener('touchend', handleTouchEnd as EventListener);
    }
  }
  
  function removeSwipeListeners() {
    const popupContent = document.querySelector('.swipeable-content');
    if (popupContent) {
      popupContent.removeEventListener('touchstart', handleTouchStart);
      popupContent.removeEventListener('touchend', handleTouchEnd);
    }
    
    // Also remove listeners from the popup
    const popup = document.getElementById('imagePopup');
    if (popup) {
      popup.removeEventListener('touchstart', handleTouchStart);
      popup.removeEventListener('touchend', handleTouchEnd);
    }
  }
  
  // Add global event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Handle deep linking on page load
    handleDeepLink();
    
    // Set up link copy buttons
    setupLinkCopyButtons();
    
    // Listen for hash changes to handle navigation without page reload
    window.addEventListener('hashchange', handleDeepLink);
    
    // Hide the video loading spinner when a video loads
    document.querySelectorAll('.video-embed iframe').forEach((iframe: HTMLIFrameElement) => {
      iframe.addEventListener('load', function(this: HTMLIFrameElement) {
        const loadingEl = this.closest('.video-item-container')?.querySelector('.media-loading');
        if (loadingEl) {
          loadingEl.style.display = 'none';
        }
      });
    });
    
    // Use the actual event system for image clicks to pass the event to openMedia
    document.querySelectorAll('.carousel img').forEach((img: HTMLImageElement) => {
      img.addEventListener('click', function(event) {
        event.preventDefault();
        openMedia('image', this.src, event);
      });
    });
    
    const popupElement = document.getElementById('imagePopup');
    if (popupElement) {
      // Use PointerEvent instead of MouseEvent properties
      popupElement.addEventListener('pointerdown', function(event) {
        if (event instanceof PointerEvent && event.target instanceof Element && event.target.id === 'imagePopup') {
          closePopup();
        }
      });
    }
    
    document.addEventListener('keydown', function(event) {
      const popup = document.getElementById('imagePopup');
      if (popup && popup.style.display !== 'none') {
        if (event.key === 'Escape') {
          closePopup();
        } else if (event.key === 'ArrowLeft') {
          popupPrev();
        } else if (event.key === 'ArrowRight') {
          popupNext();
        }
      }
    });
    
    // Handle detail item arrows rotation
    const detailItems = document.querySelectorAll('.detail-item');
    detailItems.forEach(item => {
      item.addEventListener('toggle', () => {
        const arrow = item.querySelector('.detail-arrow');
        if (arrow) {
          if (item.hasAttribute('open')) {
            arrow.classList.add('rotate-180');
          } else {
            arrow.classList.remove('rotate-180');
          }
        }
      });
    });
  });
  
  // Expose functions to global scope
  declare global {
    interface Window {
      openMedia: (type: 'video' | 'image', url: string, event?: Event) => void;
      closePopup: () => void;
      popupPrev: () => void;
      popupNext: () => void;
    }
  }
  
  window.openMedia = openMedia;
  window.closePopup = closePopup;
  window.popupPrev = popupPrev;
  window.popupNext = popupNext;
</script>

<style>
  .carousel-container {
    position: relative;
  }
  .carousel {
    scroll-behavior: smooth;
    overflow-y: hidden;
  }
  .image-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.75);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    touch-action: pan-y; /* Enable vertical scrolling but capture horizontal swipes */
  }
  .popup-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    width: 90vw;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  #popupMedia {
    max-width: 90vw;
    max-height: 90vh;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    touch-action: pan-y; /* Enable vertical scrolling but capture horizontal swipes */
  }
  .popup-img {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
    border-radius: 4px;
    object-fit: contain;
    display: block;
    -webkit-user-select: none; /* Prevent selection on iOS */
    user-select: none;
  }
  .close-popup {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: #fff;
    z-index: 10000;
  }
  
  .popup-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0,0,0,0.5);
    border: none;
    color: #fff;
    font-size: 2rem;
    padding: 10px;
    cursor: pointer;
    z-index: 10000;
    transition: opacity 0.3s ease;
  }
  
  /* Hide navigation buttons on touch devices in landscape orientation */
  @media (max-width: 1024px) and (pointer: coarse) {
    .popup-nav {
      opacity: 0.4; /* Make navigation buttons more subtle on mobile */
    }
    
    .popup-nav:active {
      opacity: 0.8; /* Make navigation buttons more visible when pressed */
    }
  }
  
  .popup-left {
    left: 10px;
  }
  .popup-right {
    right: 10px;
  }
  
  /* Style for videos in the main page */
  .video-wrapper {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%;
  }
  .video-wrapper iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    border-radius: 4px;
  }
  
  /* Specific style for videos in popup */
  .popup-video {
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    position: relative;
    display: block;
    margin: 0 auto;
  }
  
  /* Make video fill more of the popup */
  @media (min-width: 768px) {
    .popup-video {
      width: 80vw;
      min-width: 80vw;
      padding-bottom: 45vw; /* Slightly less than 56.25% of 80vw */
    }
  }
  
  /* Scale popup for smaller screens */
  @media (max-width: 767px) {
    .popup-video {
      width: 90vw;
      padding-bottom: 50.625vw; /* 56.25% of 90vw */
    }
  }
  
  .hover\:bg-li:hover {
    background-color: rgba(203, 45, 62, 0.25);
  }
  .detail-item .detail-arrow {
    transition: transform 0.3s ease;
  }
  
  .detail-item[open] .detail-arrow {
    transform: rotate(180deg);
  }
  
  details > summary::-webkit-details-marker {
    display: none;
  }
  
  /* Loading spinner styles */
  .loading-spinner {
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top: 3px solid #fff;
    width: 24px;
    height: 24px;
    animation: spin 1s linear infinite;
    display: inline-block;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .popup-loading {
    width: 100%;
    height: 100%;
    min-height: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    flex-direction: column;
  }
  
  .media-loading {
    z-index: 5;
    transition: opacity 0.3s ease;
  }
  
  /* When image loads, we'll hide the loading indicator */
  .media-image[src] + .media-loading {
    opacity: 0;
    pointer-events: none;
  }
  
  /* Swipe hint indicator */
  .swipeable-content:after {
    content: '';
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: rgba(255,255,255,0.3);
    border-radius: 2px;
    display: none; /* Hidden by default, shown on small screens via media query */
  }
  
  /* Only show swipe hint on mobile */
  @media (max-width: 767px) and (pointer: coarse) {
    .swipeable-content:after {
      display: block;
    }
  }
  
  .detail-item .detail-arrow {
    transition: transform 0.3s ease;
  }
  
  .detail-item[open] .detail-arrow {
    transform: rotate(180deg);
  }
  
  details > summary::-webkit-details-marker {
    display: none;
  }
  
  /* Enhanced styles for the copy link button */
  .card a[href^="#event-"] {
    position: relative;
    transition: all 0.3s ease;
  }
  
  .card a[href^="#event-"]:hover {
    background-color: rgba(255, 255, 255, 0.1);
    transform: scale(1.1);
  }
  
  .card a[href^="#event-"]:active {
    transform: scale(0.9);
  }
  
  /* Add a small tooltip effect */
  .card a[href^="#event-"]::after {
    content: "Copy link";
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(5px);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 3px 6px;
    border-radius: 3px;
    font-size: 12px;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
    white-space: nowrap;
  }
  
  .card a[href^="#event-"]:hover::after {
    opacity: 1;
  }
  
  /* Highlight the targeted event */
  :target {
    scroll-margin-top: 2rem;
  }
  
  :target > .card {
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);
    animation: highlight-pulse 2s ease-in-out;
  }
  
  @keyframes highlight-pulse {
    0% { box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3); }
    50% { box-shadow: 0 0 0 4px rgba(203, 45, 62, 0.6); }
    100% { box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3); }
  }
</style>
