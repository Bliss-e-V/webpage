---

---

<div
  id="canvasContainer"
  class="absolute top-0 left-0 w-screen h-screen md:fixed -z-10 flex flex-row items-center"
>
</div>

<script>
  import p5 from "p5";

  const canvasSize = 720;

  function backgroundAnimation(p) {
    // Adapted from https://www.youtube.com/watch?v=sZBfLgfsvSk
    let particles = [];
    let velocities = [];
    const num = 500;

    const noiseScale = 2 / canvasSize;
    const velocityDecay = 7 / canvasSize;
    const maxVelocity = 100;
    const dt = 0.05;
    const gravityStrength = 1;
    const gravityEqualsOneAtDistance = 0.7;

    p.setup = function () {
      let canvas = p.createCanvas(canvasSize, canvasSize);
      canvas.parent("canvasContainer");
      canvas.style("margin-left", `calc(100% - ${canvasSize}px)`);

      for (let i = 0; i < num; i++) {
        particles.push(
          p.createVector(
            p.random(
              canvasSize / 2 - canvasSize / 5,
              canvasSize / 2 + canvasSize / 5,
            ),
            p.random(
              canvasSize / 2 - canvasSize / 5,
              canvasSize / 2 + canvasSize / 5,
            ),
          ),
        );
        velocities.push(
          p.createVector(
            p.random(2 * maxVelocity) - maxVelocity,
            p.random(2 * maxVelocity) - maxVelocity,
          ),
        );
      }

      p.stroke(255);
      p.strokeWeight(1.5);
      p.clear();
    };

    p.draw = function () {
      p.background(0, 25);
      for (let i = 0; i < num; i++) {
        let particle = particles[i];
        let v = velocities[i];
        let color = p.getColor(particle);
        p.stroke(color);
        p.point(particle.x, particle.y);
        let n = p.noise(
          particle.x * noiseScale,
          particle.y * noiseScale,
          p.frameCount * noiseScale * 0.5,
        );
        let a = 8 * p.TAU * n;

        let gravity = p
          .createVector(canvasSize / 2, canvasSize / 2)
          .sub(particle);
        gravity = gravity.div(canvasSize / 2);
        gravity = gravity.div(gravityEqualsOneAtDistance);
        gravity = gravity.setMag(gravity.mag() ** (1 / gravityStrength));

        let dx = p.cos(a) + gravity.x;
        let dy = p.sin(a) + gravity.y;
        v.x += dx - velocityDecay * v.x;
        v.y += dy - velocityDecay * v.y;
        v.x = p.constrain(v.x, -maxVelocity, maxVelocity);
        v.y = p.constrain(v.y, -maxVelocity, maxVelocity);
        particle.x += dt * v.x;
        particle.y += dt * v.y;
        if (!p.onScreen(particle)) {
          particle.x = p.random(p.width);
          particle.y = p.random(p.height);
        }
      }
    };

    p.getColor = function (particle) {
      const colors = [
        [255, 0, 0], // red
        [255, 0, 0], // red
        [255, 128, 0], // orange
        [255, 255, 0], // yellow
        [0, 255, 0], // green
        [0, 0, 255], // blue
        [128, 0, 255], // purple
        [128, 0, 255], // purple
      ];
      const dx = canvasSize / 8;
      for (var i = 1; i < colors.length; i++) {
        if (particle.y < i * dx) {
          var m = i * dx - particle.y;
          if (m < dx) {
            m = dx - m;
          }
          m = m / dx;
          var c = p.color(
            (1 - m) * colors[i - 1][0] + m * colors[i][0],
            (1 - m) * colors[i - 1][1] + m * colors[i][1],
            (1 - m) * colors[i - 1][2] + m * colors[i][2],
          );
          return c;
        }
      }
      return p.color(colors[colors.length - 1]);
    };

    p.mouseReleased = function () {
      p.noiseSeed(p.millis());
    };

    p.onScreen = function (particle) {
      return (
        particle.x >= 0 &&
        particle.x <= p.width &&
        particle.y >= 0 &&
        particle.y <= p.height
      );
    };
  }

  let sketch = new p5(backgroundAnimation, "background_animation");

  let windowHeight: number = window.innerHeight;
  let windowWidth: number = window.innerWidth;

  function handleScroll() {
    // from right to left (on tablet, desktop)
    let canvas: HTMLElement = document.querySelector(
      "#canvasContainer > canvas",
    )!;
    let recent: HTMLElement = document.getElementById("speaker Series")!;
    if (!canvas || !recent) {
      return;
    }

    let scroll = window.scrollY;
    let distanceToRecent = recent.getBoundingClientRect().top - windowHeight;
    let fractionToRecent = scroll / (scroll + distanceToRecent);

    if (fractionToRecent < 1) {
      let margin = (1 - fractionToRecent) * (windowWidth - canvasSize);
      canvas.style.marginLeft = `${margin}px`;
    } else {
      canvas.style.opacity = `${Math.max(
        20,
        100 - Math.abs(recent.getBoundingClientRect().top - windowHeight) / 8,
      )}%`;
    }
  }

  if (windowWidth > 630) {
    addEventListener("scroll", handleScroll);
  } else {
    addEventListener("appLoaded", () => {
      let canvas: HTMLElement = document.querySelector(
        "#canvasContainer > canvas",
      )!;
      canvas.style.opacity = "50%";
    });
  }
</script>
